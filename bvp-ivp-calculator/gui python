import tkinter as tk
from tkinter import messagebox
from scipy.integrate import solve_ivp
import numpy as np
import matplotlib.pyplot as plt

class BVPIVPApp:
    def __init__(self, master):
        self.master = master
        master.title("BVP/IVP Calculator")

        self.label_eq = tk.Label(master, text="Differential Equation (dy/dx = f(x, y)):")
        self.label_eq.pack()
        self.eq_input = tk.Entry(master)
        self.eq_input.pack()

        self.label_conditions = tk.Label(master, text="Initial/Boundary Conditions:")
        self.label_conditions.pack()
        self.cond_input = tk.Entry(master)
        self.cond_input.pack()

        self.solve_button = tk.Button(master, text="Solve", command=self.solve)
        self.solve_button.pack()

        self.result_label = tk.Label(master, text="")
        self.result_label.pack()

    def solve(self):
        eq_str = self.eq_input.get()
        conditions_str = self.cond_input.get()

        # Parse initial/boundary conditions
        try:
            if 'IVP' in conditions_str:
                x0, y0 = map(float, conditions_str.split(',')[1:])
                self.solve_ivp(eq_str, x0, y0)
            elif 'BVP' in conditions_str:
                x0, y0, x1, y1 = map(float, conditions_str.split(',')[1:])
                self.solve_bvp(eq_str, x0, y0, x1, y1)
            else:
                raise ValueError("Invalid condition format.")
        except Exception as e:
            messagebox.showerror("Input Error", str(e))

    def solve_ivp(self, eq_str, x0, y0):
        # Define the equation
        def f(x, y):
            return eval(eq_str)

        sol = solve_ivp(f, [0, 10], [y0], t_eval=np.linspace(0, 10, 100))
        self.plot_solution(sol.t, sol.y[0])
        self.result_label.config(text="IVP Solved!")

    def solve_bvp(self, eq_str, x0, y0, x1, y1):
        # Define the equation for BVP
        def f(x, y):
            return eval(eq_str)

        # Boundary conditions
        def boundary_conditions(ya, yb):
            return np.array([ya[0] - y0, yb[0] - y1])

        # Solve BVP
        from scipy.integrate import solve_bvp
        x = np.linspace(x0, x1, 100)
        y = np.zeros((2, x.size))  # Adjust based on the number of equations
        y[0, 0] = y0
        y[0, -1] = y1
        sol = solve_bvp(f, boundary_conditions, x, y)

        if sol.success:
            self.plot_solution(sol.x, sol.y[0])
            self.result_label.config(text="BVP Solved!")
        else:
            messagebox.showerror("Error", "BVP solution failed.")

    def plot_solution(self, x, y):
        plt.plot(x, y, label='Solution')
        plt.xlabel('x')
        plt.ylabel('y')
        plt.title('Solution of the Differential Equation')
        plt.legend()
        plt.grid()
        plt.show()

if __name__ == "__main__":
    root = tk.Tk()
    app = BVPIVPApp(root)
    root.mainloop()
