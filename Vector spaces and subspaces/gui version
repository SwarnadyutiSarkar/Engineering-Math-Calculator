import tkinter as tk
from tkinter import messagebox
import numpy as np

class VectorSpaceApp:
    def __init__(self, master):
        self.master = master
        master.title("Vector Spaces and Subspaces")

        self.label = tk.Label(master, text="Enter vectors (comma-separated):")
        self.label.pack()

        self.vector_input = tk.Entry(master)
        self.vector_input.pack()

        self.check_button = tk.Button(master, text="Check Vector Space", command=self.check_vector_space)
        self.check_button.pack()

        self.result_label = tk.Label(master, text="")
        self.result_label.pack()

    def check_vector_space(self):
        try:
            vectors_str = self.vector_input.get()
            vectors = [list(map(float, vec.split())) for vec in vectors_str.split(',')]
            matrix = np.array(vectors)

            if self.is_vector_space(matrix):
                self.result_label.config(text="The set of vectors forms a vector space.")
            else:
                self.result_label.config(text="The set of vectors does NOT form a vector space.")
        except Exception as e:
            messagebox.showerror("Input Error", "Please enter valid vectors.")

    def is_vector_space(self, matrix):
        # Check for closure under addition
        if not self.check_closure_addition(matrix):
            return False
        # Check for closure under scalar multiplication
        if not self.check_closure_scalar_multiplication(matrix):
            return False
        return True

    def check_closure_addition(self, matrix):
        # Closure under addition: A + B is in the set
        for i in range(len(matrix)):
            for j in range(i, len(matrix)):
                sum_vec = matrix[i] + matrix[j]
                if not self.is_in_set(sum_vec, matrix):
                    return False
        return True

    def check_closure_scalar_multiplication(self, matrix):
        # Closure under scalar multiplication: cA is in the set for any scalar c
        for scalar in [0, 1]:  # Test with scalar 0 and 1
            for vec in matrix:
                scalar_mult_vec = scalar * vec
                if not self.is_in_set(scalar_mult_vec, matrix):
                    return False
        return True

    def is_in_set(self, vec, matrix):
        # Check if vec is in the set of rows of the matrix
        return any(np.allclose(vec, row) for row in matrix)

if __name__ == "__main__":
    root = tk.Tk()
    app = VectorSpaceApp(root)
    root.mainloop()
